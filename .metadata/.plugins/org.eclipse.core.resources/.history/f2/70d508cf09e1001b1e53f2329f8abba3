import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



public class Solution {
    public static void main(String[] args) throws IOException {
    	ListNode a = new ListNode(2, new ListNode(4, new ListNode(3))), b = new ListNode(5, new ListNode(6, new ListNode(4)));
        addTwoNumbers(a, b);
    }
    
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode() {}
     *     ListNode(int val) { this.val = val; }
     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int num1 = 0, num2 = 0, num3 = 0;
        ListNode cur = l1;
        
        while(cur!=null)
        {
            num1 += cur.val;
            num1 *= 10;
            cur = cur.next;
        }
        num1 /= 10;
        cur = l2;
        while(cur!=null)
        {
            num2 += cur.val;
            num2 *= 10;
            cur = cur.next;
        }
        num2 /= 10;
        
        num3 = reverseNum(num1) * reverseNum(num2);
        
        return l1;
    }
    
    public static int reverseNum(int num)
    {
        int reverse = 0;
        while(num != 0)
        {
        	int digit = num%10;
        	reverse += digit + reversed * 10;
        	num /= 10;
        }
        System.out.println(reverse);
        return reverse;
    }
}

class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}
